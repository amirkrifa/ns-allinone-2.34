/*
 * Copyright (c) 2010 INRIA
 * All rights reserved.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as 
 * published by the Free Software Foundation;
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * In addition, as a special exception, the copyright holders of
 * this module give you permission to combine (via static or
 * dynamic linking) this module with free software programs or
 * libraries that are released under the GNU LGPL and with code
 * included in the standard release of ns-2 under the Apache 2.0
 * license or under otherwise-compatible licenses with advertising
 * requirements (or modified versions of such code, with unchanged
 * license).  You may copy and distribute such a system following the
 * terms of the GNU GPL for this module and the licenses of the
 * other code concerned, provided that you include the source code of
 * that other code when and as the GNU GPL requires distribution of
 * source code.
 *
 * Note that people who make modified versions of this module
 * are not obligated to grant this special exception for their
 * modified versions; it is their choice whether to do so.  The GNU
 * General Public License gives permission to release a modified
 * version without this exception; this exception also makes it
 * possible to release a modified version which carries forward this
 * exception.
 *
 * Author: Amir Krifa <amir.krifa@sophia.inria.fr>
 */
#ifndef CCMSN_H
#define CCMSN_H

#include "routes.h"
#include "bundle.h"
#include "common/node.h"
#include "bmflags.h"
#include "BloomStat.h"
#include <string>
#include <list>
#include <map>
#include <vector>
#include <semaphore.h>

class Interest{
public :
	 Interest(int mst);
	~Content();
	void update_elapsed_time(double);
	double  get_elapsed_time();
	const char * getid(){return id.c_str();};
	void set_arrival_date(double x){this->time_stamp=x;};
	void add_copie(int r){};
	void setid(char *s);
	void set_bundle(Bundle *b);
	Bundle *b_;
	double time_stamp;
	int forwarding_number;
	int enable_sprying;
	int max_sprying_time;
	double network_copy_time;
	void ShowDetails();
private:
	string id;
	
};

class Content
{

};



class CleanBufferTimer;
class BundleManager;

class CCMSN {

public  :
		CCMSN(BundleManager *b);
		~CCMSN();

		char * getBundleId(Bundle *b);
		BundleStore *  exist_id(char *id,int u_id);
		int  add_id(char * id,int u_id);
		int  add_bundle(Bundle *b);
		int  free_place();
		void init_buffers();
		void free_buffers();
		
		
		void make_clean();

		// Epidemic session
		void init_session(char * id,char *r, string source_id);
		int  recv_c1(Bundle *b);
		int  recv_c2(Bundle *b);
		int  recv_c3(Bundle *b);

		int get_u_id(char *id);
		void get_rn(char *id, string & rn);
		int id_length(char * list, int id);
		void getBundleIdUid(Bundle *b, string &bundleUid);

		void god_check_for_message(const char * id,int u_id,int *x);

		int exact_copys_number(Bundle *b);
		int is_my_message(Bundle *b);
		int get_number_of_copies(Bundle *b);

		float get_min( float a, float b){ if( a>=b) return b; else return a;}
		
		BundleStore * get_pointer_to(int position);
		void get_source_id_of_bundle(Bundle *b, string &);
	

		int exact_number_of_node_that_have_seen_it(Bundle *b);
		

		// Maintaining list of all messages that i have seen
		void AddSeenMessage(string id);
		bool DidISeeMessage(string &id);
	
		double buffer_last_update;

		BundleManager* bm_;

		double total_meeting_samples;
		double last_meeting_instant;
		int number_of_meeting;		

		// not unique meetings
		double total_meeting_samples_not_unique;
		double last_meeting_instant_not_unique;
		int number_of_meeting_not_unique;		
		int get_closest_et(int et);
		
private :
		
		sem_t buffer_sem;
		
		CleanBufferTimer * cbt_;
		
};



#endif CCMSN
 
